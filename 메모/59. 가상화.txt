1. 가상화
[가상화]
- 하나의 물리적환경에서 여러개의 환경구축
- 하드웨어 장애로부터 격리
- 데이터는 외장스토리지에서 공유
- 물리적종속성을 없앰
- 볼륨 : 데이터를 저장하는 영구스토리지

[하이퍼바이저]
- 물리적리소스 -> 가상리소스로 바꾸는 도구

[스냅샷]
- 가상환경을 복제 -> 리소스 사용량이 너무 늘어남

[머신=노드=시스템] : 눈으로보이는 물리적장비

[vm쓰는 이유]
- 서버(물리장비)를 이중화하면 복제될때시간이 오래걸린다(10분~20분)
- 가상화를 쓰면 복제시간이 작다(1초이내)
=====================================================
2. 컨테이너
[컨테이너]
- 어플리케이션만을 가상화
- os커널에 독립적 : 커널정보가 변경되려면 부팅이 필요함
- os커널위에서 동작
- 하이퍼바이저가없음

[(작업)공간]
- cpu + 메모리 + 스토리지 + 네트워크
=====================================================
3. 컨테이너 오케스트레이션
[쿠버네티스]
- 수백개이상의 컨테이너를 관리(쿠버네티스 1만2천개)
- 배포자동화, 자가치유, 스케일링, 로드밸런싱
- (pod:컨테이너의 집합) 을 복제해서 IO 분산가능
- manifast : 배포설정
- k8s + 추가기능 소프트웨어 : 레드햇 오픈시프트, 아마존 eks 등 -> k8기능자체는 공유되나 추가기능은 공유X
- GPL 라이센스 : 오픈소스로 공개된 코드. GPL 라이센스 코드를 수정/개조하면 반드시 똑같이 오픈소스로 공개해야한다.
- AI는 자원사용량이 많고 수많은 컨테이너로 이루어져있기때문에 거의 쿠버네티스기반 환경에서 구축됨
=====================================================
4. 도커
- 이미지 : os 커널 + app + costy? + code
- 명령어
run : create + start /  stop : 리소스반환 / pause : 리소스 소유
start : 이미 stop된 컨테이너를 실행 / restart : 지금 running중인 컨테이너를 stop 후 start

4.1. 컨테이너 서버리스 차이
- 서버리스 : 같은 컨테이너 단위이나 도커처럼 독립적으로 배포하는게 아니고 클라우드서비스자체에서 제공.
- 컨테이너(어플리케이션+코드) / 서버리스(어플리케이션). 즉, 컨테이너중에 서버리스 컨테이너와 상시 컨테이너가 있다고보면된다.

4.1. 도커 컴포즈
- 간단한 오케스트레이션 도구. 오케스트레이션이라고 부르긴 살짝부족해서 개인단위에서 쓰이고 기업에선 잘 안쓰인다.
- web -> api -> db까지의 일련의 과정처리(YAML을 통해 통합관리) 

4.2. 도커와 podman차이
- 도커 : 데몬(메모리에상주하는 백그라운드)기반, root(uid : 0)권한 필요. 리소스사용량 많음. os 커널과 관련(리부팅필요)
	-> 데몬방식문제점 : 데몬에 문제생기면 커널에도 문제생길수있음. 도커 root가 커널 root로 인식해서 도커 root가 공격받으면 보안위협 높음.
- podman : 데몬리스(루트리스). 커널과 관련X(리부팅필요X). -> 일반계정사용으로 보안안정성높음. 실제사용할때만 리소스사용
- podman은 pod(하나이상의 컨테이너집합) 사용가능 -> k8s에서 그대로 사용가능

4.3. 리눅스보안
- root계정은 uid가 0으로 고정임 -> 보안취약. 도커 root와 같아서 보안사고 많이 났음.
- root계정은 일반적으로 disable시키고 시스템을 직접 건드리는작업은 일반계정에서 sudo권한을 주고 작업.
