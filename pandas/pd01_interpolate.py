'''
결측치 처리 
1. 삭제 - 행 또는 열 
2. 임의의 값 
    - 0 : fillna()
    - 평균 값 : mean(이상치의 문제가 있음)
    - 중위 값: median
    ################(시계열에서 많이 씀)###########
    - 앞값 : ffill
    - 뒷값 : bfill 
    - 특정값 : 777 (조건 보고 넣는게 낫다)
    - 기타 등등 ... => 뭐있는지 모르겠다 궁금하면 찾아 보기
    
3. interpolate - 보간(알려진 데이터 점 집합의 범위 내에 새 데이터 점을 추가하는 기법)
=> 선형 보간이기 때문에 비선형(범주형) 데이터는 안됨

4. 모델 : .predict(값을 예측해서),(전혀 다른 모델 사용 하는게 좋음) => 부스팅 계열(트리 구조)은 자동으로 보간 해줌  
5. 부스팅 계열 모델: 통상 이상치, 결측치에 대해 영향을 덜 받는다.    
6. 이상치 처리 (어제 했던 boxplot(여기서 찾은 이상치들만 처리) => 이게 진짜 많이 쓰는 거임 )

'''

import pandas as pd 
import numpy as np

dates = [
    '16/7/2025','17/7/2025','18/7/2025',
    '19/7/2025','20/7/2025','21/7/2025',
    '22/7/2025'    
]

dates = pd.to_datetime(dates)
print(dates)


# DATETIME 인덱스 형식으로 변환 
# DatetimeIndex(['2025-07-16', '2025-07-17', '2025-07-18', '2025-07-19',
#                '2025-07-20', '2025-07-21', '2025-07-22'],
#               dtype='datetime64[ns]', freq=None)

# 이제 이걸 실제 데이터의 인덱스로 쓸거임


print('###########################################')
ts = pd.Series([2,np.nan,np.nan,8,10,np.nan,np.nan],index = dates) # 벡터 형태 데이터 
# ts = pd.DataFrame() # metrics 형태 데이터 

print(ts)
# 2025-07-16     2.0
# 2025-07-17     NaN
# 2025-07-18     NaN
# 2025-07-19     8.0
# 2025-07-20    10.0
# 2025-07-21     NaN

print('#################################')


ts = ts.interpolate() # 선형 보간 
print(ts)

# 2025-07-16     2.0
# 2025-07-17     4.0
# 2025-07-18     6.0
# 2025-07-19     8.0
# 2025-07-20    10.0
# 2025-07-21    10.0
# 2025-07-22    10.0
# dtype: float64 => NaN이 float 형이라 자동으로 타입이 바뀌었음
# 중간 값들은 linear로 채워짐. 마지막은 ffill (이전값으로 채워짐)


ts = pd.Series([2,3,4,5,6,7,8],index = dates) # 벡터 형태 데이터 
print(ts) # 디폴트 = int 64 (하나라도 float 들어가면 전체 dtype이 float으로 바뀜)