==============================================================================================
* (1) venv 가상환경세팅
==============================================================================================
# 1. 우분투 시스템 업데이트
sudo apt update && sudo apt upgrade -y

# 2. apt저장소에서 필수패키지 설치
sudo apt install -y python3 python3-pip python3-venv python-is-python3

# 3. 작업디렉토리생성&이동
mkdir -p ~/apps/chatbot && cd ~/apps/chatbot

# 4. venv 가상환경 생성
python3 -m venv .venv

# 5. venv 가상환경 실행
source .venv/bin/activate

# 6. pip패키지 최신화
pip install --upgrade pip

# 7. pip패키지 설치
pip install streamlit openai python-dotenv

# 8. pip설치패키지 확인 
pip list

==============================================================================================
* (2) conda 가상환경세팅
==============================================================================================
# 1. 우분투 시스템 업데이트&필요패키지 설치
sudo apt update && sudo apt upgrade -y && sudo apt install curl -y

# 2. Miniconda 설치 파일 다운로드
curl https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -o Miniconda3-latest-Linux-x86_64.sh

# 3. 설치 파일 실행 권한 부여
chmod +x Miniconda3-latest-Linux-x86_64.sh

# 4. Miniconda 설치 실행
-  설치경로(which conda) : /home/eps/miniconda3/bin/conda
bash Miniconda3-latest-Linux-x86_64.sh

# 5. bash 쉘에 conda 환경 변수 추가
echo 'export PATH=$PATH:/home/eps/miniconda3/bin' >> ~/.bashrc && source ~/.bashrc

# 6. conda 가상환경 자동실행 끄기/켜기
conda config --set auto_activate_base false
conda config --set auto_activate_base true

# 7. conda 가상환경 생성
conda create -n .venv python==3.10.12

# 8. conda 가상환경 실행
conda activate .venv

# 9. conda 패키지 설치(채널별 설치 포함)
# 9.1. conda 공식채널에서 설치
conda install cudatoolkit=12.1
# 9.2. conda-forege 채널에서 설치
conda install -c conda-forge cudatoolkit=12.1
# 9.2. 채널 2개이상 설정(pytorch채널에서 찾고, 없으면 nvidia 채널에서 찾아서 설치. 앞에 있을수록 우선순위)
conda install -c pytorch -c nvidia pytorch torchvision torchaudio pytorch-cuda=12.1

# [참고] 10-1 : conda에서 cuda관련설치
 - cudatoolkit : 범용 CUDA런타임. 여러 프레임워크에서 사용가능.
 - pytorch-cuda : pytorch전용 CUDA런타임. cudatoolkit이랑 같이 설치하면 충돌. 

==============================================================================================
* (3) uv 가상환경세팅
 - uv는 conda처럼 가상환경 이름이 없고 가상환경이 설치될 경로를 명시한다.
 - PyPI 생태계 관리 프로그램이기때문에 pip 명령어 호환은 된다.
==============================================================================================
# 1. 우분투 시스템 업데이트&필요패키지 설치
sudo apt update && sudo apt upgrade -y && sudo apt install curl -y

# 2. uv 설치 스크립트 실행
 - 설치경로(which uv) : /home/eps/.local/bin/uv
curl -LsSf https://astral.sh/uv/install.sh | sh
또는 
pip install uv

# 3. bash 쉘에 uv 환경 변수 추가
echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc && source ~/.bashrc
uv --version

# 4. uv 프로젝트 선언(.toml 생성 + 프로젝트로 쓸 디렉토리생성) & 디렉토리로 이동. 그냥 uv init만 하면 현재 디렉토리를 프로젝트로 선언
uv init ~/my-uv-project && cd ~/my-uv-project

# 5. uv 가상환경 경로생성
# 5.1. 현재 프로젝트에 기본경로(.venv)를 생성한 후 가상환경을 설치한다.
uv venv
# 5.2. 현재 프로젝트에 my-env라는 경로를 생성한 후 가상환경을 설치한다.
uv venv my-env
# 5.3. 현재 프로젝트에 my-env라는 경로를 생성한 후 가상환경을 설치하는데 버전을 명시한다.
uv venv --python 3.11 my-env
# 5.4. .venv에 설치된 파이썬 인터프리터 활성화
source .venv/bin/activate
which python

# 6. uv 가상환경 실행. 가상환경이 생성되어있지않다면 자동으로 가상환경 생성한다.
# 6.1. 디폴트 가상환경경로(.venv)로 파이썬 스크립트 실행
uv run python main.py
또는 
uv run python ~/my-uv-project/main.py
# 6.2. 특정 가상환경경로(my-env)로 파이썬 스크립트 실행
uv run --venv my-env python main.py
또는
uv run --venv ~/my-uv-project/my-env python main.py

# [참고] 6.3. uv설계원칙
한 프로젝트(my-uv-project)내에서는 한 개의 가상환경(.venv)만 사용하도록 한다.
안 그러면 pyproject.toml 관리부터 꼬인다.

# 7. uv 패키지설치. 가상환경이 생성되어있지않다면 자동으로 가상환경 생성한다.
uv add pandas
uv remove pandas

# 7.1. 패키지 임시(pip)설치(pyproject.toml, uv.lock에 업데이트 안됨)
uv pip install pandas
uv pip uninstall pandas

# 7.2. 여러 프로젝트 운용중일때 특정 프로젝트에 명시적으로 패키지 설치  
uv add --project ~/my-uv-project pandas

# 8. 파이썬 인터프리터 실행(가상환경 바깥에서도 실행 가능)
uv run main.py

# 10. 파이썬 버전 수정
# 10.1. 기존 가상환경 삭제
rm -rf .venv
# 10.2. .python-version pyproject.toml  에서 버전 수정
# 10.3. 새 가상환경생성
uv venv
또는
uv venv .venv
또는 
uv run python --version

# 11. sync 맞추기
 - requirements.txt + pip install + venv 관리 + poetry install 를 한방에 해주는 명령어
 - 남의 프로젝트 내려받을 때 사용
 - CI/CD, 배포 서버, 도커 이미지 빌드할때
 - .venv가 꼬였을때 (.venv 삭제 후 실행)
 - [기타] : 배포할때는 .venv는 제외한다(.gitignore)
uv sync

# 12. 버전확인
uv pip list
uv pip show pandas

# [참고] 13-1
.python-version : 실제 설치될 파이썬 실행환경만 명시 (ex : 3.11). 디폴트로 시스템(호스트)의 파이썬3 버전이 명시된다.
pyproject.toml : 호환 가능한 파이썬 실행환경(ex :  requires-python = ">=3.9,<3.13")을 포함한 모든 패키징 메타데이터 명시
다른 버전의 파이썬을 생성하고싶거나 생성하고나면(.python-version, pyproject.toml 을 명시적으로 수정해야한다.)

# [참고] 13-2 : uv run 작동순서
.venv 있을 때 : .venv 환경으로 파이썬 실행
.venv 없을 때 : 우선순위 .python-version -> pyproject.toml 순으로 세팅하고 -> .venv생성 -> uv.lock에 의존성 고정

# [참고] 13-3 : PyPI(pip, uv)에서 cuda(torch)관련설치
 - PyPI생태계에서는 torch를 다운 받을때 cuda런타임을 포함한 wheel을 직접 다운받으므로 conda와 달리 cuda별도 설치가 필요없다.
pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121

# [참고] 13-4 : 캐시삭제
 uv cache clean\

# [참고] 13-5 : 명령어 실행 위치 (source .venv/bin/activate 해서 파이썬인터프리터 제대로 로드했을때)
 - uv run, python, uvicorn : 아무데서나 해도됨.
 - uv add, uv sync, uv lock : 올바른 프로젝트위치에서 해야됨.

==============================================================================================
* (4) cuda 전역 세팅
# 호스트에서 cuda까지 설치할 경우에만 사용.
# cuda는 하위 가상환경(conda, uv 등)에서 각각 설치해 사용할 것을 권장.
# apt로 cuda설치(GPG키, 저장소 추가 필요)하는 과정이기때문에 복잡하다.

# 윈도우 -> driver 설치여부확인
# 호스트(WSL2) -> driver 공유여부확인 -> cudatoolkit(cuda포함임) 설치
# 가상환경 -> cudatoolkit 공유여부확인
==============================================================================================
# 1. 윈도우/호스트(WSL2)에서 driver 설치/공유여부 확인(CUDA Version: 최대지원가능한 cuda 버전)
nvidia-smi

# 2. 호스트(WSL2)/가상환경에서 cudatoolkit 설치/공유여부 확인 : 설치 안되있을시 3번부터시작
nvcc --version

# 3. 우분투 시스템 업데이트
sudo apt update && sudo apt upgrade -y

# 4. 필요패키지 설치
sudo apt install -y gpg wget

# 5. GPG키 다운로드 및 등록
wget https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pin && \
sudo mv cuda-wsl-ubuntu.pin /etc/apt/preferences.d/cuda-repository-pin-600

# 6. cuda 저장소 추가(12.8 기준)
wget https://developer.download.nvidia.com/compute/cuda/12.8.0/local_installers/cuda-repo-wsl-ubuntu-12-8-local_12.8.0-1_amd64.deb && \
sudo dpkg -i cuda-repo-wsl-ubuntu-12-8-local_12.8.0-1_amd64.deb && \
sudo cp /var/cuda-repo-wsl-ubuntu-12-8-local/cuda-*-keyring.gpg /usr/share/keyrings/ && \
sudo apt-get update

# 7. cudatoolkit 설치(12.8 기준)
sudo apt install -y cuda-toolkit-12-8

# 8. 환경변수설정(12.8 기준)
vim ~/.bashrc

맨 아래에 두 줄 추가

export PATH=/usr/local/cuda-12.8/bin${PATH:+:${PATH}}
export LD_LIBRARY_PATH=/usr/local/cuda-12.8/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}

저장후 아래 실행

source ~/.bashrc

==============================================================================================
* (5) Node.js 설치
 - 자바스크립트 런타임 실행환경
 - npm을 설치를 포함함. npm install ... 사용가능
 - 공식패키지로 전역설치하는 것보단 버전관리매니저(nvm, fnm, volta 등)로 홈경로에 설치하는것 추천
 - node, npm이 fnm 하위에 설치되기 때문에 npm으로 설치한 것도 모두 fnm 하위에 설치됨.
==============================================================================================
# 1. 우분투 시스템 업데이트
sudo apt update && sudo apt upgrade -y && sudo apt install -y unzip

# 2-1. 전역 설치(20버전)
 -  설치경로(which node) : /usr/bin/node
curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
sudo apt-get install -y nodejs
# 2-1.1. 버전확인
node -v
npm -v 

# 2-2-1. 버전 매니저(fnm)로 설치(fnm 설치 -> node.js 설치)
 - 필요 의존성 : curl, unzip 
 - 설치경로(which fnm) : /home/eps/.local/share/fnm/fnm
curl -fsSL https://fnm.vercel.app/install | bash
# 2-2-1.1. 환경변수 업데이트 (.bashrc 맨 밑에 fnm 추가됐으면)
source ~/.bashrc
# 2-2-1.2. 환경변수 업데이트 (.bashrc에 추가안됐으면)
echo 'export PATH="$HOME/.fnm:$PATH"' >> ~/.bashrc
echo 'eval "$(fnm env --use-on-cd --shell bash)"' >> ~/.bashrc
source ~/.bashrc
 - 설치 경로(which fnm) : /home/eps/.local/share/fnm/fnm

# 2-2-2. Node.js 설치 및 버전 확인
 - 세션실행경로(which node) : /run/user/1000/fnm_multishells/2812_1760171055535/bin/node
 - 세션실행경로(which npm) : /run/user/1000/fnm_multishells/2812_1760171055535/bin/npm
 - fnm환경변수가 bash 쉘에 추가되어있기때문에 별도로 .bashrc 환경변수 추가 불필요
fnm install --lts
fnm list -> v22.20.0 이면
fnm use v22.20.0
node -v
npm -v
 
# [참고] codex 설치
# 3.1. codex IDE : 편집기에서 extension으로 설치 -> ~/.codex 생성
# 3.2. codex cli : npm으로 설치, extension으로 설치한거랑은 별도의 패키지로 작동. fnm매니저 npm으로 설치했으면 fnm하위에 설치됨
npm install -g @openai/codex
 - 세션실행경로(which codex) : /run/user/1000/fnm_multishells/2812_1760171055535/bin/codex
 - fnm환경변수가 bash 쉘에 추가되어있기때문에 별도로 .bashrc 환경변수 추가 불필요
 - ~/.codex : 자동생성되는 전역설정폴더. codex IDE 에서 로그인했으면 codex cli에서 로그인 건너뜀.
 - .codexrc.json : codex cli 전용 설정파일. 수동으로 만들어야한다. codex cli는 현재 경로에서 .codexrc.json를 불러오고, 없으면 전역설정폴더(~/.codex)를 불러온다.
codex --version
# 3.3 튜토리얼 : https://goddaehee.tistory.com/402



